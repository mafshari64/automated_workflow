# Copyright 2013-2023 Axel Huebl, Rene Widera, Felix Schmitt, Franz Poeschel,
#                     Hannes Tropegen, Brian Marre, Masoud Afshari
#
# This file is part of PIConGPU.
#
# PIConGPU is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# PIConGPU is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with PIConGPU.
# If not, see <http://www.gnu.org/licenses/>.
#

##
## This configuration file is used by PIConGPU's TBG tool to create a
## batch script for PIConGPU runs. For a detailed description of PIConGPU
## configuration files including all available variables, see
##
##                      docs/TBG_macros.cfg
##

# enable unbound variable safeguard
# see `set --help` for explanation on shell flags
# here used: u (`set -u`) which make the shell crash on undefined variables
#
# This defines a command to be executed after this script which restores
# the shell option "u" to its previous state
if [[ "$-" =~ ^.*u.*$ ]]
then
    SHELL_OPT_U_RESTORE='set -u'
else
    SHELL_OPT_U_RESTORE='set +u'
fi

set -u
# -> unbound vars will now raise error


#################################
## Section: Required Variables ##
#################################

TBG_wallTime="1:00:00"

{{#grid.gpu_cnt}}
  TBG_devices_x={{{x}}}
  TBG_devices_y={{{y}}}
  TBG_devices_z={{{z}}}
{{/grid.gpu_cnt}}

{{#grid.cell_cnt}}
  TBG_gridSize="{{{x}}} {{{y}}} {{{z}}}"
{{/grid.cell_cnt}}

TBG_steps="{{{time_steps}}}"

#################################
## Section: Optional Variables ##
#################################

{{#grid.boundary_condition}}
  TBG_periodic="--periodic {{{x}}} {{{y}}} {{{z}}}"
{{/grid.boundary_condition}}

{{#output.auto}}
# only use charge conservation if solver is yee AND using cuda backend
if [[ "Yee" = "{{{solver.name}}}" ]] && [[ "$PIC_BACKEND" =~ ^cuda(:.+)?$ ]]
then
    USED_CHARGE_CONSERVATION_FLAGS="--chargeConservation.period {{{period}}}"
else
    USED_CHARGE_CONSERVATION_FLAGS=""
fi
{{/output.auto}}

{{#moving_window}}
  TBG_movingWindow="-m"
  TBG_windowMovePoint="--windowMovePoint {{{move_point}}}"
  {{#stop_iteration}}
    TBG_stopWindow="--stopWindow {{{stop_iteration}}}"
  {{/stop_iteration}}
{{/moving_window}}

pypicongpu_output_with_newlines="
  {{#customuserinput}}

        --{{{customuserinput.png_plugin_species_name}}}_png.period {{{customuserinput.png_plugin_period}}}
        --{{{customuserinput.png_plugin_species_name}}}_png.axis {{{customuserinput.png_plugin_axis}}}
        --{{{customuserinput.png_plugin_species_name}}}_png.slicePoint {{{customuserinput.png_plugin_slicePoint}}}
        --{{{customuserinput.png_plugin_species_name}}}_png.folder {{{customuserinput.png_plugin_folder_name}}}

        --{{{customuserinput.energy_histogram_species_name}}}_energyHistogram.period {{{customuserinput.energy_histogram_period}}}
        --{{{customuserinput.energy_histogram_species_name}}}_energyHistogram.binCount {{{customuserinput.energy_histogram_bin_count}}}
        --{{{customuserinput.energy_histogram_species_name}}}_energyHistogram.minEnergy {{{customuserinput.energy_histogram_min_energy}}}
        --{{{customuserinput.energy_histogram_species_name}}}_energyHistogram.maxEnergy {{{customuserinput.energy_histogram_max_energy}}}
        --{{{customuserinput.energy_histogram_species_name}}}_energyHistogram.filter {{{customuserinput.energy_histogram_filter}}}

         --{{{customuserinput.phase_space_species_name}}}_phaseSpace.period {{{customuserinput.phase_space_period}}}
         --{{{customuserinput.phase_space_species_name}}}_phaseSpace.space {{{customuserinput.phase_space_space}}}
         --{{{customuserinput.phase_space_species_name}}}_phaseSpace.momentum {{{customuserinput.phase_space_momentum}}}
         --{{{customuserinput.phase_space_species_name}}}_phaseSpace.min {{{customuserinput.phase_space_min}}}
         --{{{customuserinput.phase_space_species_name}}}_phaseSpace.max {{{customuserinput.phase_space_max}}}
         --{{{customuserinput.phase_space_species_name}}}_phaseSpace.filter {{{customuserinput.phase_space_filter}}}

        --openPMD.period {{{customuserinput.openPMD_period}}}
        --openPMD.file {{{customuserinput.openPMD_file}}}
        --openPMD.ext {{{customuserinput.openPMD_extension}}}

        --checkpoint.backend {{{customuserinput.checkpoint_backend}}}
        --checkpoint.period {{{customuserinput.checkpoint_period}}}
        --checkpoint.restart.backend {{{customuserinput.checkpoint_restart_backend}}}

        --{{{customuserinput.macro_particle_count_species_name}}}_macroParticlesCount.period {{{customuserinput.macro_particle_count_period}}}
  {{/customuserinput}}
  {{^customuserinput}}
      {{#output.auto}}
        --fields_energy.period {{{period}}}
        --sumcurr.period {{{period}}}
        $USED_CHARGE_CONSERVATION_FLAGS

        {{#species_initmanager.species}}
            --{{{name}}}_macroParticlesCount.period {{{period}}}

            --{{{name}}}_energy.period {{{period}}}
            --{{{name}}}_energy.filter all

            --{{{name}}}_energyHistogram.period {{{period}}}
            --{{{name}}}_energyHistogram.filter all
            --{{{name}}}_energyHistogram.binCount 1024
            --{{{name}}}_energyHistogram.minEnergy 0
            --{{{name}}}_energyHistogram.maxEnergy 256000

            {{#png_axis}}
                --{{{name}}}_png.period {{{period}}}
                --{{{name}}}_png.axis {{{axis}}}
                --{{{name}}}_png.slicePoint 0.5
                --{{{name}}}_png.folder png_{{{name}}}_{{{axis}}}
            {{/png_axis}}
        {{/species_initmanager.species}}

      {{/output.auto}}
    {{/customuserinput}}
  "

# remove newlines
TBG_pypicongpu_output=$(sed -z 's/\n/ /g' <<< "$pypicongpu_output_with_newlines")

TBG_plugins="!TBG_pypicongpu_output"

#################################
## Section: Program Parameters ##
#################################

TBG_deviceDist="!TBG_devices_x !TBG_devices_y !TBG_devices_z"

TBG_programParams="-d !TBG_deviceDist   \
                   -g !TBG_gridSize     \
                   -s !TBG_steps        \
                   !TBG_periodic        \
                   !TBG_plugins         \
                {{#moving_window}}
                   !TBG_movingWindow    \
                   !TBG_windowMovePoint \
                  {{#stop_iteration}}
                   !TBG_stopWindow      \
                  {{/stop_iteration}}
                {{/moving_window}}
                   --versionOnce"

# TOTAL number of devices
TBG_tasks="$(( TBG_devices_x * TBG_devices_y * TBG_devices_z ))"

# restore shell opt u to previous state
$SHELL_OPT_U_RESTORE

"$TBG_cfgPath"/submitAction.sh
