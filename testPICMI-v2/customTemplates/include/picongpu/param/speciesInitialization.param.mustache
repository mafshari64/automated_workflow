/* Copyright 2013-2024 Rene Widera, Benjamin Worpitz, Heiko Burau,
 *                     Hannes Troepgen
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "picongpu/particles/InitFunctors.hpp"

#include <picongpu/param/particle.param>
#include <picongpu/pypicongpu/util.hpp>

namespace picongpu
{
    namespace particles
    {
        /** InitPipeline define in which order species are initialized
         *
         * the functors are called in order (from first to last functor)
         */
        {{! note: this serves to enter the context -- it is NOT a loop }}
        {{#species_initmanager}}
        using InitPipeline = pmacc::mp_list<
            /* note to the editors of this file:
             *
             * Sometimes it is not possible to split the initialization separate "creation" and "manipulation" phases,
             * because some init pipeline operations mix the two phases.
             *
             * Hence, consider removing these explicit "phase 1/2" comments when editing the init pipeline by hand.
             */

            /**********************************/
            /* phase 1: create macroparticles */
            /**********************************/

            {{#operations.simple_density}}
                /// @details This functor assumes the ratio to be 1. The correct density ratio of the species is applied
                /// here (automatically by CreateDensity).

                CreateDensity<
                    densityProfiles::pypicongpu::init_{{{placed_species_initial.typename}}},
                    startPosition::pypicongpu::init_{{{placed_species_initial.typename}}},
                    {{{placed_species_initial.typename}}}>,

                {{#placed_species_copied}}
                    ManipulateDerive<
                        manipulators::binary::DensityWeighting,
                        {{{placed_species_initial.typename}}},
                        {{{typename}}}>,
                {{/placed_species_copied}}

            {{/operations.simple_density}}

            /*********************************************/
            /* phase 2: adjust other attributes (if any) */
            /*********************************************/

            {{#operations.simple_momentum}}
                {{! simple momentum adds a temperature & drift without inter-species dependencies }}
                {{#drift}}
                    // *sets* drift, i.e. overwrites momentum
                    Manipulate<manipulators::pypicongpu::AssignDrift_{{{species.typename}}}, {{{species.typename}}}>,
                {{/drift}}
                {{#temperature}}
                    // *adds* temperature, does *NOT* overwrite
                    Manipulate<manipulators::pypicongpu::AddTemperature_{{{species.typename}}}, {{{species.typename}}}>,
                {{/temperature}}
            {{/operations.simple_momentum}}

            {{#operations.set_charge_state}}
                Manipulate<manipulators::pypicongpu::PreIonize_{{{species.typename}}}, {{{species.typename}}}>,
            {{/operations.set_charge_state}}

            // does nothing -- exists to catch trailing comma left by code generation
            pypicongpu::nop>;
        {{/species_initmanager}}

    } // namespace particles
} // namespace picongpu
